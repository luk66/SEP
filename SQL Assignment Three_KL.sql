--- Assignment Three ---
--1.	In SQL Server, assuming you can find the result by using both joins and subqueries, which one would you prefer to use and why?
--	It depends on case. JOIN can only be used in FROM, subquery in SELECT, WHERE, HAVING, FROM, ORDER BY. 
--	Subquery is easy to understand, but join has a better performance.

--2.	What is CTE and when to use it?
--	CTE stands for common table expression.  It is a temporary named result set that you can reference.

--3.	What are Table Variables? What is their scope and where are they created in SQL Server?
--	Table variable is a local temporary variable.
--	Scope is the batch it's defined in. They are created in Temporary tables.
	
--4.	What is the difference between DELETE and TRUNCATE? Which one will have better performance and why?
--	DELETE is modifying data; TRUNCATE is managing tables. 
--	DELETE removes rows one at a time and records an entry in the transaction log for each deleted row.
--	TRUNCATE removes the data by deallocating the data pages used to store the table data and records only the page deallocations in the transaction log.
--	TRUNCATE command is faster than DELETE command.

--5.	What is Identity column? How does DELETE and TRUNCATE affect it?
--	An identity column is a column (also known as a field) in a database table that is made up of values generated by the database. 
--	Identity of column retains the identity after using DELETE Statement on table.
--	Identity of the column is reset to its seed value if the table contains an identity column.

--6.	What is difference between “delete from table_name” and “truncate table table_name”?
--	DELETE is modifying data; TRUNCATE is managing tables. 

USE [Northwind]

--- 1 ---
SELECT DISTINCT C.City
FROM DBO.Customers C
JOIN DBO.Employees E
ON C.City = E.City

--- 2 ---
--- a. SUB QUERY ---
SELECT DISTINCT C.City
FROM DBO.Customers C WHERE C.City NOT IN (SELECT A.City FROM DBO.Customers A JOIN DBO.Employees E ON A.City = E.City )
--- b. WITHOUT SUB QUERY ---
SELECT DISTINCT C.City
FROM DBO.Customers C
LEFT JOIN DBO.Employees E
ON C.City = E.City
WHERE E.City IS NULL

--- 3 ---
SELECT P.ProductID, COUNT(OD.OrderID) AS [ORDER QUANTITY]
FROM DBO.Products P
JOIN DBO.[Order Details] OD
ON P.ProductID = OD.ProductID
GROUP BY P.ProductID

--- 4 ---
SELECT C.City, SUM(SUB.Quantity)
FROM DBO.Customers C
LEFT JOIN (
SELECT O.CustomerID, OD.Quantity
FROM DBO.Orders O
JOIN DBO.[Order Details] OD
ON O.OrderID = OD.OrderID
) SUB
ON C.CustomerID = SUB.CustomerID
GROUP BY C.City

--- 5 ---
--- a UNION ---
--- b SUB QUERY WITHOUT UNION ---
SELECT C.City, COUNT(C.CustomerID)
FROM DBO.Customers C
GROUP BY C.City
HAVING COUNT(C.CustomerID) >= 2

--- 6 ---
SELECT C.City, COUNT(S.ProductID)
FROM DBO.Customers C
JOIN (
SELECT O.CustomerID, OD.ProductID
FROM DBO.Orders O
JOIN DBO.[Order Details] OD
ON O.OrderID = OD.OrderID
) S
ON C.CustomerID = S.CustomerID
GROUP BY C.City
HAVING COUNT(S.ProductID) >= 2
ORDER BY C.City

--- 7 ---
SELECT C.CustomerID, C.ContactName
FROM DBO.Customers C
JOIN DBO.Orders O
ON C.CustomerID = O.CustomerID
WHERE C.City <> O.ShipCity
GROUP BY C.CustomerID, C.ContactName

--- 8 ---
SELECT TOP 5 P.ProductName, SUBSUB.AVGPRICE, SUBSUB.TOTALQTY, SUBSUB.City
FROM(
SELECT OD.ProductID, AVG(OD.UnitPrice) AS AVGPRICE, SUM(OD.Quantity) AS TOTALQTY, SUB.City, RANK() OVER(PARTITION BY OD.PRODUCTID ORDER BY SUM(OD.QUANTITY) DESC) AS RNK
FROM DBO.[Order Details] OD
JOIN
(
SELECT C.CustomerID, C.City, O.OrderID
FROM DBO.Customers C
JOIN DBO.Orders O
ON C.CustomerID = O.CustomerID
) SUB
ON SUB.OrderID = OD.OrderID
GROUP BY OD.ProductID, SUB.City) SUBSUB
JOIN DBO.Products P
ON P.ProductID = SUBSUB.ProductID
WHERE SUBSUB.RNK = 1 ORDER BY SUBSUB.TOTALQTY DESC


--- 9 ---
SELECT E.City
FROM DBO.Employees E 
WHERE E.City NOT IN (
SELECT  C.City
FROM DBO.Customers C
JOIN DBO.Orders O
ON C.CustomerID = O.CustomerID
) 

Select City from dbo.Employees a left join dbo.Orders b on a.City = b.ShipCity where b.ShipCity is null


--- 10 ---


SELECT SUB1.City 
FROM
(SELECT COUNT(O.OrderID) ORDERCOUNT, E.EmployeeID, E.City, RANK() OVER(ORDER BY COUNT(O.OrderID) DESC) AS RNK
FROM DBO.Orders O
JOIN DBO.Employees E
ON E.EmployeeID = O.EmployeeID
GROUP BY E.EmployeeID, E.City) AS SUB1
JOIN(
SELECT TOP 1 OD.OrderID, O.EmployeeID, SUM(OD.Quantity) AS TOTALQTY
FROM DBO.[Order Details] OD
JOIN DBO.Orders O
ON OD.OrderID = O.OrderID
GROUP BY OD.OrderID, O.EmployeeID
ORDER BY SUM(OD.Quantity)
) AS SUB2
ON SUB1.EmployeeID = SUB2.EmployeeID AND SUB1.RNK = 1

--- 11 ---
--you can use group by, CTE, RANK to delete duplicate rows

--- 12 ---
SELECT A.EMPID
FROM Employee A
LEFT JOIN Employee B
ON A.EMPID = B.MGID 
WHERE A.MGID IS NULL

--- 13 ---
SELECT DD.DEPTNAME, SUB.DPTCOUNT
FROM (
SELECT D.DEPTID, COUNT(E.EMPID) AS DPTCOUNT, RANK() OVER(ORDER BY COUNT(E.EMPID)) AS RNK
FROM Employee E
JOIN DEPT D
ON E.DEPTID = D.DEPID
GROUP BY D.DEPID
ORDER BY D.DEPTNAME
WHERE RNK = 1) SUB
JOIN DEPT DD
ON DD.DEPRID = SUB.DEPTID

--- 14 ---
SELECT SUB.DEPTNAME, SUB.SALARY
FROM (
SELECT D.DEPTNAME, E.SALARY, RANK() OVER(PARTITION BY D.DEPTID ORDER BY E.SALARY DESC) AS RNK
FROM Employee E
JOIN DEPT D
ON E.DEPTID = D.DEPTID) SUB
WHERE SUB.RNK <= 3

